//!============================================================
//!
//!  @file    : Camera.h
//!  @brief   : カメラクラスのヘッダーファイル
//!  @author  : 原田 陽央
//!  @details : カメラの実装
//!             ゲームオブジェクトクラスを継承
//!
//!============================================================
#pragma once


//============================================================
//　インクルード
//============================================================
#include "GameObject.h"
#include "Keylogger.h"


//!===========================================================
//! @enum CameraType
//! @brief   : カメラのタイプ列挙体
//!===========================================================
enum CameraType
{
	CAMERA_DEBUG,
	CAMERA_FIXED,
	CAMERA_PLAYER,
	CAMERA_Dungeon_PLAYER,
	CAMERA_MAX_COUNT
};


//!===========================================================
//! @class Camera
//! @brief   : カメラのクラス
//!===========================================================
class Camera : public GameObject
{
public:

	//!-------------------------------------------------------
	//! @fn      : Init()
	//! @brief   : 初期化をする
	//! @param   : なし
	//! @return  : なし
	//! @details : 初期化とベクトルの正規化
	//!-------------------------------------------------------
	void Init();

	//!-------------------------------------------------------
	//! @fn      : Uninit()
	//! @brief   : 終了処理をする
	//! @param   : なし
	//! @return  : なし
	//! @details : 実装内容なし
	//!-------------------------------------------------------
	void Uninit();

	//!-------------------------------------------------------
	//! @fn      : Update()
	//! @brief   : 更新をする
	//! @param   : なし
	//! @return  : なし
	//! @details : キー入力によるカメラのタイプの変更
	//!            キー入力によるカメラの移動
	//!            タイプによって実装の変更
	//!-------------------------------------------------------
	void Update();

	//!-------------------------------------------------------
	//! @fn      : Draw()
	//! @brief   : 描画をする
	//! @param   : なし
	//! @return  : なし
	//! @details : ビューマトリクス設定
	//!            プロジェクションマトリクス設定
	//!            ニアとファーの値の設定
	//!-------------------------------------------------------
	void Draw();

	//!-------------------------------------------------------
	//! @fn      : Camera_GetViewMatrix()
	//! @brief   : カメラのビュー行列の取得
	//! @param   : なし
	//! @return  : カメラのビュー行列
	//! @details : カメラのビュー行列を返す
	//!-------------------------------------------------------
	D3DXMATRIX Camera_GetViewMatrix() const;

	//!-------------------------------------------------------
	//! @fn      : CheckView(D3DXVECTOR3 objectPosition)
	//! @brief   : 視錐台カリングの実装
	//! @param   : objectPosition...チェックしたいオブジェクトの座標
	//! @return  : 設定した視錐台の範囲内にオブジェクトがあるかどうか
	//! @details : 変数に指定したオブジェクト座標が
	//!            視錐台の範囲内にあるかをチェックして
	//!            存在する場合には true を返す
	//!-------------------------------------------------------
	bool CheckView(D3DXVECTOR3 objectPosition);

	//!-------------------------------------------------------
	//! @fn      : CheckOnlyCameraMove()
	//! @brief   : カメラのみが可動できるカメラタイプかどうかのチェック
	//! @param   : なし
	//! @return  : カメラのみが可動できる状態かどうか
	//! @details : カメラのみが可動できるカメラタイプかどうかを
	//!            チェックしてその可否を返す
	//!            カメラのみが動けるタイプの場合は true
	//!            カメラが動けないタイプの場合は　 false
	//!-------------------------------------------------------
	bool CheckOnlyCameraMove();

private:

	//!-------------------------------------------------------
	//! @fn      : CameraKeyInput(KeyloggerKey keyType)
	//! @brief   : キー入力の際のカメラ制御
	//! @param   : keyType...入力されたキーのタイプ
	//! @return  : なし
	//! @details : 前後左右上下の移動と回転の実装
	//!            押されたキーに対しての移動や回転を行う
	//!-------------------------------------------------------
	void CameraKeyInput(KeyloggerKey keyType);


	//! 注視点ベクトル
	D3DXVECTOR3 target; 

	//! 前ベクトル
	D3DXVECTOR3 vecFront;      

	//! 横ベクトル
	D3DXVECTOR3 vecSide;          

	//! 上下ベクトル
	D3DXVECTOR3 vecUp;         

	//! ベクトル一時保存用
	D3DXVECTOR3 vecTemp;          

	//! プレイヤー追従用
	D3DXVECTOR3 vecPlayerView;    
	GameObject* player;

	//! ビュー行列
	D3DXMATRIX viewMatrix;      

	//! プロジェクション行列
	D3DXMATRIX projectionMatrix;

	//! 回転する際の一時保存用行列
	D3DXMATRIX mtxTempR;       

	//! カメラの移動スピード
	float moveSpeed;            

	//! カメラの回転スピード
	float rotateSpeed;          

	//! 注視点状態
	bool rotateAt;             

	//! カメラのタイプ
	CameraType cameraType;   

};